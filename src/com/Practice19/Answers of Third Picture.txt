
1. یک - (Race Conditions): زمانی رخ میدهد که چند ترد بخواهند از یک منبع مشترک استفاده کنند.
در Race Condition، نتیجه ی صحیحی از منابعی که اشتراکی هستند بدست نمی آید.
که این منجر به ایجاد باگ شده و Debug کردن آن نیز دشوار میشود.

دو - (DeadLock): این حالت زمانی اتفاق می افتد که دو یا چند تردی که Blocked هستند،
منتظر یکدیگر جهت آزاد شدن یک منبع میمانند و هیچ یک، پردازشی انجام نمیدهند
این انتظار زمانی رخ میدهد که تردها منابع را در ترتیبی متفاوت قفل میکنند
که سبب یک انتظار دایره ای میشود که نمیتوان آنرا شکست.

سه - (Overhead): ساخت و مدیریت تردها نیازمند سربار(اضافه کاری / Overhead) در بخشی از حافظه و منابع cpu است.
هر ترد Stack مختص خود را دارد و Context Switching بین تردها میتواند هزینه بر باشد.
در نتیجه استفاده زیاد یا ساختن تردها باعث افت Performance و کارایی میشود.

-------------------------------------------------------------------------------------------------------------------

2. غلط. در این حالت Race Condition رخ داده است. Data Race به حالتی خاص اشاره دارد
که در آن دو یا چند ترد، به یک متغیر مشترک دسترسی داشته باشند.
و حداقل یک از آنها دیتا را تغییر میدهد.
درواقع Data Race نوعی از Race Condition به حساب می آید.

-------------------------------------------------------------------------------------------------------------------

3. هماهنگ سازی یا Synchronization روشی است تا مطمئن شویم
که تردها رفتارهای صحیح و مدنظر ما را انجام دهند و با یکدیگر تداخل نداشته باشند.
در MultiThreading ممکن است Race Condition یا DeadLock یا Overhead و یا حالت های دیگری از ارور اتفاق بیوفتد
که Synchronization جهت کنترل این ارورها استفاده میشود.

-------------------------------------------------------------------------------------------------------------------

4. یک - (Mutual Exclusion): یک ویژگی از Synchronization است
که مطمئن میشود که فقط یک ترد به Shared Resource دسترسی داشته باشد.
که این امر از Race Condition و دیگر ارورها جلوگیری میکند.

دو - (Coordination): یکی دیگر از ویژگی های مهم Synchronization است که باعث هماهنگی فعالیت های تردها میشود.
مکانیزم های Coordination (مثل: semaphores و monitors) این امکان را به تردها میدهند
تا به یکدیگر سیگنال بدهند و عملیاتشان را هماهنگ کنند.

-------------------------------------------------------------------------------------------------------------------

5. به چندین روش پیاده‌سازی میشد. از جمله:
یک - (Locks): قفل ها به‌طور ساده و گسترده مورد استفاده هستند.
یک Lock این امکان را به ترد میدهد تا یک Shared Resource را قفل کند. و تردهای دیگر مجبورند تا آزاد شدن آن قفل منظر بمانند.

دو - (Semaphore): Semaphoreها یک مکانیزم Synchronization هستند که به تردها امکان میدهند
تا به یکدیگر سیگنال بدهند و فعالیت هایشان را هماهنگ کنند.

سه - (Monitor): یک مکانیزم سطح بالایی از synchronization هستند که Mutual Exclusion و Coordination را فراهم میکنند.
یک Monitor آبجکتی است که یک Shared Resource و متدهایی که به این Shared Resource دسترسی دارند را کپسوله میکند.
یک Monitor فقط به یک ترد اجازه اجرای یک متد را در لحظه میدهد.

چهار - (Barriers): مکانیزمی از Synchronization است که به تردها این امکان را میدهد تا در نقاط خاصی از برنامه، هماهنگ باشند.
یک Barrier تمام تردها را تا زمانی که همه تردها به آن Barrier نرسیده اند، Block میکند و سپس همه تردها را یکجا آزاد میکند.
زمانی از Barrier استفاده میشود که نیاز است تا تردها منتظر یکدیگر بمانند تا همگی به یک نقطه از برنامه برسند.

پنج - (Atomic Operations): عملیات‌های اتمی، ابزارهای همگام‌سازی سطح پایینی هستند
که برای گارانتی اتمی بودن و سازگاری در برخی از عملیات‌های مشترک بر روی متغیرهای اشتراکی استفاده می‌شوند.
این عملیات‌ها از طریق پشتیبانی سخت‌افزاری (مانند دستورات مقایسه و جایگزینی) یا مکانیزم‌های مبتنی بر نرم‌افزار،
پیاده‌سازی می‌شوند و می‌توانند برای پیاده‌سازی قفل‌ها یا سایر مکانیزم‌های همگام‌سازی استفاده شوند.

-------------------------------------------------------------------------------------------------------------------

6. غلط. تردی که قفل را فعال کرده، قبل از این که یکی از متدهای sleep را فراخوانی کند، باید قفل را آزاد کند.

-------------------------------------------------------------------------------------------------------------------

7. با استفاده از عبارت synchronized در هنگام تعریف یک متد. مثال:

public synchronized void myMethod()
{
    // Codes...
}

-------------------------------------------------------------------------------------------------------------------

8. با استفاده از بلاک synchronized، یک قسمت خاص از متد را Sync میکنیم. مثلا:

public void myMethod() {
        // Non-synchronized codes...

        synchronized (lock) {
            // Synchronized code block
        }

        // Non-synchronized codes...
    }