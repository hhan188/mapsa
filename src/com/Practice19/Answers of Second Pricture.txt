
14. اولویت بندی تردها با متد setPriority و از 1 (کمترین) تا 10 (بیشترین) مشخص میشود. مقدار پیشفرض اولویت تردها 5 است.

-------------------------------------------------------------------------------------------------------------------

15. درست.

-------------------------------------------------------------------------------------------------------------------

16. اگر روی یک آبجکت درحال اجرا یا یک آبجکتی که مرده (پردازشش تمام شده) متد start را صدا بزنیم،
خطای IllegalThreadStateException پرت خواهد شد. چرا که امکان start مجدد روی همان ترد امکان‌پذیر نیست.

-------------------------------------------------------------------------------------------------------------------

17. برای متوقف کردن برنامه در جاوا میتوان از متد exit از کلاس System استفاده کرد.
این متد، فعالیت jvm فعلی را متوقف میکند و استفاده از آن باید با احتیاط صورت گیرد.
چرا که اجازه پاکسازی یا shutdown کردن task ها را از بین میبرد.

روش دیگر متوقف کردن برنامه بوسیله ویندوز استفاده از Task Manager است.

-------------------------------------------------------------------------------------------------------------------

18. متدهای بخض interruption عبارت اند از:
یک (interrupt): این متد وضعیت interrupt یک ترد را به مقدار true ست میکند.
اگر تردی از متدهای sleep, wait و join استفاده میکند، خطای InterruptedException خواهد داد.

دو (isInterrupted): این متد با برگرداندن یک مقدار boolean مشخص میکند که یک ترد Interrupt شده است یا نه.
این متد امکان پاکسازی وضعیت Interrupt یک ترد را ندارد.

سه (interrupted): یک متد static است که علاوه بر چک کردن وضعیت interrupt یک ترد، وضعیت interrupt آن ترد را نیز پاکسازی میکند.

چهار (Thread.interrupted): مانند حالت interrupted عمل میکند.

-------------------------------------------------------------------------------------------------------------------

19. غلط

-------------------------------------------------------------------------------------------------------------------

20. وقتی یک ترد interrupt میشود، اکسپشن InterruptedException پرت میشود
که باعث میشود قبل از خاتمه یافتن آن ترد تمام پاکسازی های لازم انجام شود.

-------------------------------------------------------------------------------------------------------------------

21. یک حقله busy loop یا همان spin loop، حلقه ای است که مکررا یک شرط را چک میکند بدون آنکه کار موثری انجام بدهد.
با این که این نوع حلقه یک روش ساده جهت چک کردن یا منتظر ماندن برای یک شرط است،
میتواند موجب Starve ماندن دیگر تردها شود و Performance سیستم را کاهش دهد.
در تلفن های همراه نیز میتواند روی طول عمر باتری ها تاثیر منفی داشته باشد.
راهکار جایگرین برای busy loopها، استفاده از lockها و Synchronization است.

-------------------------------------------------------------------------------------------------------------------

22. یک (join): با استفاده از این متد، ترد منتظر پایان اجرای ترد/تردهای دیگر میماند
درواقع متد فعلی block میشود تا ترد مورد نظر کار خود را تمام کند.

دو ((long millis)join): در این حالت ترد تا زمان مشخص شده ای در واحد میلی ثانیه، منتظر پایان کار ترد مورد نظر میماند.

سه ((long millis, int nanos)join): در این حالت نیز ترد در زمان مشخص شده در واحد های
میلی ثانیه و نانوثانیه، منتظر پایان کار ترد مورد نظر میماند.

در حالت های دوم و سوم هرکدام از حالت های ترد
(پایان ترد و یا پایان زمان مشخص شده) زودتر اتفاق بیوفتند، عمل join اتفاق می افتد.

-------------------------------------------------------------------------------------------------------------------

23. دو حالت از متد sleep وجود دارد که یکی در واحد میلی ثانیه،
و دیگری در دو واحد میلی ثانیه و نانو ثانیه، ترد را بحالت sleep میبرند:
sleep(long millis)
sleep(long millis, int nanos)