
1. یک ترد یک واحد از execution درون یک پروسه است.
درواقع یک ترد، یک جریان از دستورات است که امکان زمان‌بندی و اجرا دارد. هر ترد درون یک استک فریم متفاوت اجرا میشود.

-------------------------------------------------------------------------------------------------------------------

2. یک Runnable آبجکتی است که یک تسک یا عملیاتی که به وسیله یک ترد قابل اجرا است را ارائه میکند.

-------------------------------------------------------------------------------------------------------------------

 3. در جاوا، کلاس ترد و اینترفیس runnable هردو برای ساختن ترد و مالتی ترد کردن برنامه استفاده میشوند.
 کلاس ترد به روش extend کردن، یک ترد میسازد و متدهای start, join و sleep برای مدیریت تردها، فراهم میکند.
  اینترفیس runnable نیز یک متد run دارد که شامل کدهایی است که یک ترد در زمان استارت آنها را اجرا میکند.
  اینترفیس runnable از طریق implement کردن یک ترد میسازد.

-------------------------------------------------------------------------------------------------------------------

4. روش اول: ساخت یک کلاس و Implement کردن اینترفیس runnable
روش دوم: ساخت یک کلاس و Extend کردن کلاس Thread

-------------------------------------------------------------------------------------------------------------------

5. روش اول: با پاس دادن آبجکت Runnable به Constructor کلاس Thread.
که در اینصورت آبجکت Thread متد run آبجکت runnable را صدا خواهد زد.
روش دوم: با Implement کردن اینترفیس Runnable درون یک زیرکلاس Thread. مثال:

public class MyThread extends Thread implements Runnable {
    private Runnable myRunnable;

    public MyThread(Runnable runnable) {
        myRunnable = runnable;
    }

    public void run() {
        myRunnable.run();
    }
}

// To create a thread and start it:
Runnable myRunnable = new MyRunnable(); // assuming MyRunnable is a class that implements the Runnable interface
Thread myThread = new MyThread(myRunnable);
myThread.start();

-------------------------------------------------------------------------------------------------------------------

6. وضعیت اول (New): به تردی گفته میشود که آبجکت آن ساخته شده اما هنوز متد start آن فراخوانی نشده است.

وضعیت دوم (Runnable): وضعیتی است که در آن ترد start شده و درحال اجرا است
یا اینکه آماده اجرا است زمانی که cpu در اسرع وقت در دسترس باشد.
به عبارت دیگر ترد درحال اجراست یا در انتطار است تا اجرا شود.

وضعیت سوم (Blocked): زمانی یک ترد Blocked میشود که به یک بلاک یا متد Synchronized برسد.
این وضعیت زمانی رخ میدهد که یک ترد بخواهد به یک منبع مشترکی که قبلا به وسیله ترد دیگر قفل شده است دسترسی پیدا کند.
در این حالت ترد بلاک شده تا آزاد شدن آن منبع مشترک، درحالت Blocked باقی میماند.

وضعیت چهارم (Waiting): وضعیتی است که یک ترد منتظر تمام شدن عملیات یک ترد دیگر است.
با استفاده از متدهای wait, join و یا متد park از کلاس LockSupport میتوان یک ترد را به حالت waiting برد
و ترد در این حالت باقی خواهد ماند تا زمانی که آنرا notify کنیم و یا TimeOut داده شده به پایان برسد.

وضعیت پنجم (Terminated): زمانی یک ترد terminated میشود که اجرای آن تمام شده باشد و یا متد را Interupped کرده باشیم.

-------------------------------------------------------------------------------------------------------------------

7. غلط. اسم پیشفرض ترد ها با -Thread شروع میشود که بعد از خط فاصله مقدار عددی integer از 0 شروع میشود.

-------------------------------------------------------------------------------------------------------------------

8. روش اول با استفاده از متد setName آن ترد.
روش دوم با پاس دادن یک نام به Constructor در زمان ساخت یک ترد

-------------------------------------------------------------------------------------------------------------------

9.  با اسفاده از متد isAlive آن ترد. زمانی این متد true برمبگرداند که ترد running باشد.
زمانی هم این متد false میشود که اجرای ترد تمام شده و یا این که ترد هنوز start شده باشد.

-------------------------------------------------------------------------------------------------------------------

10. یک (NEW): تردی که ساخته (New) شده اما هنوز استارت نشده.
دو (RUNNABLE): وضعیتی است که ترد در حال اجرا یا آماده به اجراست.
سه (BLOCKED): متدی که منتظر Monitor Lock هست تا بتواند وارد متد یا بلاک Synchronized بشود.
چهار (WAITING): زمانی است که یک ترد منتظر پایان یک فعالیت در ترد دیگر است.
پنج (TIMED_WAITING): در این حالت، ترد تا یک زمان مشخصی منتظر پایان فعالیت یک ترد دیگر میماند.
شش (TERMINATED): زمانی که اجرای ترد تمام شده و Exited شده است.

-------------------------------------------------------------------------------------------------------------------

11. با استفاده از متد getState آن متد میتوانیم به وضعیت متد دسترسی پیدا کنیم.

-------------------------------------------------------------------------------------------------------------------

12. به اولویت دادن به ترد Priority گفته میشود.
درواقع اولویت بندی (Priority) مکانیزمی است تا ترتیب تردها را، برای زمان بندی جهت اجرا، تعریف میکند.
اولویت بندی تردها با متد setPriority و از 1 (کمترین) تا 10 (بیشترین) مشخص میشود. مقدار پیشفرض اولویت تردها 5 است.
زمانی که چندین ترد منتظر اجرا شدن توسط cpu هستند، زمان بند(Scheduler) تردی که اولویت بیشتری دارد را اول اجرا میکند.
اگر چند ترد با اولویت یکسان وجود داشته باشند،Scheduler یکی
از آنهارا براساس چندین فاکتور از جمله زمان رسیدن (Arrival) مرتب میکند.

-------------------------------------------------------------------------------------------------------------------

13. با استفاده از setPriority میتوان یک ترد را اولویت بندی کرد که در اینصورت به Scheduler اعلام میکند
که ترتیب تردها به چه صورت است. اگر چه عملکرد Scheduler بسته به نوع سیستم عامل و سخت افزار متفاوت است
و تضمینی وجود ندارد که این ترتیب رعایت شود. بنابراین اولویت بندی کردن بیش از حد تردها
تاثیر منفی بر Portability یک اپلیکیشن خواهد داشت. در برخی موارد، تنطیم کردن اولویت حداکثری روی تردها ممکن است
بحث Starvation و یا دیگر رفتارهای ناخواسته را در پی خواهد داشت.